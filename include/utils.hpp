#pragma once
#include <iostream>
#include <cmath>

namespace lines {
    struct Color {
        float r, g, b, a;

        Color() : r(0.0f), g(0.0f), b(0.0f), a(1.0f) {}

        Color(float rr, float gg, float bb, float aa)
            : r(rr), g(gg), b(bb), a(aa) {}
    };
    struct Point {
        float x, y, z;
        Color color;

        Point(float xx, float yy, float zz, Color c = Color())
            : x(xx), y(yy), z(zz), color(c) {}
    };

    inline uint32_t COLOR(float r, float g, float b, float a) {
        return static_cast<uint32_t>(
                (static_cast<uint8_t>(std::round((r) * 255)) << 24) |
                (static_cast<uint8_t>(std::round((g) * 255)) << 16) |
                (static_cast<uint8_t>(std::round((b) * 255)) << 8)  | 
                (static_cast<uint8_t>(std::round((a) * 255)))
            );
    }

    enum Types {
        CPU_GENERATED       = 0x00000000, // vertex buffer generated by CPU
        GPU_GENERATED       = 0x00000001, // vertex buffer generated by GPU using compute shader
        INSTANCING_BASED    = 0x00000002, // generated lines by instancing buffer
        INDIRECT_BASED      = 0x00000003, // instancing with indirect buffer filled with compute 
        TEXTURE_BASED       = 0x00000004, // instancing with indirect usning text buffer
    };

    enum Caps {
        BUTT_CAP            = 0x00000000,   // No extra space on caps
        SQUARE_CAP          = 0x00000001, // Extra space with square shape
        ROUND_CAP           = 0x00000002,  // Extra space with round shape
    };

    enum Joins {
        ROUND_JOIN          = 0x00000000, // Join with round shape
        BEVEL_JOIN          = 0x00000001, // Join with square shape
        MITER_JOIN          = 0x00000003, // Join with a miter
    };
}